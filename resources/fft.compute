#section common
#version 460 core

layout(std140, binding = 0) uniform fftSettings
{
  int passNum;
  bool vertical;
  ivec2 dummy;
};

#define SIZE 512
#define LOG_SIZE int(log2(SIZE))
#define NUM_CACHES 2
#define M_PI 3.141592653589793238

layout(rgba32f, binding = 0) uniform readonly image2D inputImg;
layout(rgba32f, binding = 1) uniform writeonly image2D outputImg;

#section type(compute) name(fftShift)

void main()
{
  ivec2 start = ivec2(gl_GlobalInvocationID.xy);
  ivec2 end = (start + SIZE / 2) % SIZE;

  vec4 value = imageLoad(inputImg, start);
  imageStore(outputImg, end, value);
}

#section type(compute) name(imageReversal)

uint reverseBits(uint num, uint numBits)
{
  return (bitfieldReverse(num) >> (32 - numBits));
}

// bit reversal of image
void main()
{
  ivec2 thread = ivec2(gl_GlobalInvocationID.xy);

  // read the value at the reversed value in the input image
  ivec2 revCoord = ivec2(reverseBits(thread.x, LOG_SIZE), reverseBits(thread.y, LOG_SIZE));
  vec4 revValue = imageLoad(inputImg, revCoord);

  // write our value back to the image
  imageStore(outputImg, thread, revValue);
}

#section type(compute) name(fft)

layout(local_size_x = SIZE / 2) in;

void main()
{
  uvec2 id = uvec2(gl_LocalInvocationID.x, gl_WorkGroupID.x);
  uint thread = id.x;

  // calculate our new even and odd indices
  // 1) use one thread per set of even and odd indices
  // 2) each dft requires half its size worth of threads => dft # is (thread div halfSize)
  // 3) even index = dftNum * dftSize + (thread mod halfSize)
  // 4) odd index = evenIndex + halfSize
  uint halfSize = 1u << passNum;
  uint fullSize = halfSize << 1;
  int dftNum = int(thread) / int(halfSize);
  int dftElement = int(thread) % int(halfSize);
  int evenIndex = dftNum * int(fullSize) + dftElement;
  int oddIndex = evenIndex + int(halfSize);

  // obtain position in image based on direction
  ivec2 evenPos = vertical ? ivec2(id.y, evenIndex) : ivec2(evenIndex, id.y);
  ivec2 oddPos = vertical ? ivec2(id.y, oddIndex) : ivec2(oddIndex, id.y);

  // retrieve our values and twiddle the odd factor
  vec2 even = imageLoad(inputImg, evenPos).xy;
  vec2 odd = imageLoad(inputImg, oddPos).xy;

  // compute the twiddle factor for combining two dfts
  float twiddleAngle = 2.0 * M_PI * dftElement / fullSize; // making this positive causes iFFT
  vec2 twiddle = vec2(cos(twiddleAngle), sin(twiddleAngle));

  odd = vec2(odd.x * twiddle.x - odd.y * twiddle.y, odd.x * twiddle.y + odd.y * twiddle.x);

  // store them back into our texture
  imageStore(outputImg, evenPos, vec4(even + odd, 0.0, 1.0));
  imageStore(outputImg, oddPos, vec4(even - odd, 0.0, 1.0));
}