#section common
#version 450 core

#define SIZE 512
#define LOG_SIZE int(log2(SIZE))
#define M_PI 3.141592653589793238462643383279502884197169399375105820974

layout(rgba32f, binding = 0) uniform readonly image2D imgInput;
layout(rgba32f, binding = 1) uniform writeonly image2D imgOutput;

layout(std140, binding = 0) uniform spectrumSettings
{
  float time;
  float planeSize;
  float gravity;
  float scale;
  vec2 windVelocity;
  float wavelengthMin;
  float wavelengthMax;
  int boundWavelength; // 1 = use wavelength min and max, 0 = don't use wavelength man and min.
  int dummy1, dummy2, dummy3;
};

vec2 threadToWaveNumber(vec2 thread)
{
  vec2 frequency = thread - SIZE / 2;
  return 2.0 * M_PI * frequency / planeSize;
}

vec2 complexMultiply(vec2 lhs, vec2 rhs)
{
  return vec2(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x);
}

#section type(compute) name(generateSpectrum)

float phillips(vec2 waveNumber, vec2 windVelocity, float gravity)
{
  float waveNumberLength = length(waveNumber);
  if (waveNumberLength == 0.0)
    return 0.0;

  float waveNumberLength2 = waveNumberLength * waveNumberLength;
  float waveNumberLength4 = waveNumberLength2 * waveNumberLength2;
  vec2 waveNumberDir = normalize(waveNumber);

  float windSpeed = length(windVelocity);
  vec2 windDir = normalize(windVelocity);

  float waveDotWind = dot(waveNumberDir, windDir);
  float waveDotWind2 = waveDotWind * waveDotWind;

  float L = windSpeed * windSpeed / gravity;
  float L2 = L * L;

  float damping = 0.001;
  float l2 = L2 * damping * damping;

  return exp(-1.0 / (waveNumberLength2 * L2)) / waveNumberLength4 * waveDotWind2 *
         exp(-waveNumberLength2 * l2);
}

void main()
{
  vec2 thread = vec2(gl_GlobalInvocationID.xy);
  vec2 waveNumber = threadToWaveNumber(thread);

  float wavelength = length(2 * M_PI / waveNumber);
  float inRange = max(1.0 - float(boundWavelength),
                      step(wavelengthMin, wavelength) * step(wavelength, wavelengthMax));

  // Fetch a random Gaussian value to model probability of wave existing
  vec2 currentValue = imageLoad(imgInput, ivec2(thread)).xy;

  // Calculate and store the amplitude using the phillips spectrum
  float globalScale = 0.005;
  vec2 amp = inRange * globalScale * scale * currentValue * sqrt(phillips(waveNumber, windVelocity, gravity));
  imageStore(imgOutput, ivec2(thread), vec4(amp, 0.0, 1.0));
}

#section type(compute) name(propagateWaves)

float dispersion(vec2 waveNumber, float gravity)
{
  return sqrt(gravity * length(waveNumber));
}

void main()
{
  vec2 thread = vec2(gl_GlobalInvocationID.xy);
  vec2 waveNumber = threadToWaveNumber(thread);

  // This is the formula given in tessendorf's paper.
  //   h ̃0(k) exp {iω(k)t}
  // + h ̃∗0(−k)exp{−iω(k)t}

  vec2 amplitude = imageLoad(imgInput, ivec2(thread)).xy;
  float phase = dispersion(waveNumber, gravity) * time;
  vec2 wave = vec2(cos(phase), sin(phase));
  amplitude = complexMultiply(amplitude, wave);

  vec2 oppAmplitude = imageLoad(imgInput, ivec2(SIZE - thread)).xy;
  oppAmplitude.y *= -1.0;
  wave.y *= -1.0;
  oppAmplitude = complexMultiply(oppAmplitude, wave);

  imageStore(imgOutput, ivec2(thread), vec4(amplitude + oppAmplitude, 0.0, 1.0));
}

#section type(compute) name(prepareSlopeMap)

void main()
{
  vec2 thread = vec2(gl_GlobalInvocationID.xy);
  vec2 waveNumber = threadToWaveNumber(thread);

  // Determine this waves contribution to slope of final image
  vec2 currentAmp = imageLoad(imgInput, ivec2(thread)).xy;
  vec2 xDerivative = waveNumber.x * vec2(-currentAmp.y, currentAmp.x);
  vec2 zDerivative = waveNumber.y * vec2(-currentAmp.y, currentAmp.x);

  imageStore(imgOutput, ivec2(thread), vec4(xDerivative, zDerivative));
}

#section type(compute) name(prepareDisplacementMap)

void main()
{
  vec2 thread = vec2(gl_GlobalInvocationID.xy);
  vec2 waveNumber = threadToWaveNumber(thread);
  vec2 waveDir = waveNumber == vec2(0.0) ? waveNumber : normalize(waveNumber);

  // Displacement vector = -i * k/|k| * exp(i * dot(k,x));
  vec2 currentAmp = imageLoad(imgInput, ivec2(thread)).xy;
  vec2 xDisplacementSignal = waveDir.x * vec2(currentAmp.y, -currentAmp.x);
  vec2 zDisplacementSignal = waveDir.x * vec2(currentAmp.y, -currentAmp.x);

  imageStore(imgOutput, ivec2(thread), vec4(xDisplacementSignal, zDisplacementSignal));
}